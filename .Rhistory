axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22),
strip.text = element_text(size = 22)
) +
facet_wrap(.~LNI01)
ggsave(
paste0(Vizualizaciju_Aplankas, "\\normalumas_psai.png"),
plot = normalumas_psai,
width = 17,
height = 8,
units = c("in")
)
knitr::kable(Statistine_Lentele(homogeniai_duomenys, "Amzius", "LNI01"))
knitr::kable(Statistine_Lentele(homogeniai_duomenys, "PSAI", "LNI01"))
###############################################################################
###############################################################################
###############################################################################
###############################################################################
# Taikom ne parametrinę dispersinę analizę naudodami Kruskal-Wallis test'ą
###############################################################################
# Atliekame amžiaus pagal LNI01 ne parametrinę dispresinę analizę Kruskal-Wallis test'ą
Kruskal_Amzius <- homogeniai_duomenys %>%
kruskal_test(Amzius ~ LNI01)
Kruskal_Amzius
# Pairwise lyginimas tarp grupių Dunn metodu
PairwiseComparison_Amzius <- homogeniai_duomenys %>%
dunn_test(Amzius ~ LNI01)
knitr::kable(PairwiseComparison_Amzius)
# Pairwise lyginimas tarp grupių Wilcox metodu
knitr::kable(homogeniai_duomenys %>%
wilcox_test(Amzius ~ LNI01))
# Vizualizuojame pariwise lyginimą
PairwiseComparison_Amzius <-
PairwiseComparison_Amzius %>% add_xy_position(x = "LNI01")
PW_amzius <-
ggboxplot(homogeniai_duomenys, x = "LNI01", y = "Amzius") +
stat_pvalue_manual(PairwiseComparison_Amzius, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Kruskal_Amzius, detailed = TRUE),
caption = get_pwc_label(PairwiseComparison_Amzius)
)  +
theme(
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22),
plot.subtitle = element_text(size = 22),
plot.caption = element_text(size = 22)
)
ggsave(
paste0(Vizualizaciju_Aplankas, "\\PW_amzius.png"),
plot = PW_amzius,
width = 17,
height = 8,
units = c("in")
)
# Atliekame PSAI pagal LNI01 ne parametrinę dispresinę analizę Kruskal-Wallis test'ą
Kruskal_PSAI <- homogeniai_duomenys %>%
kruskal_test(PSAI ~ LNI01)
Kruskal_PSAI
# Pairwise lyginimas tarp grupių Dunn metodu
PairwiseComparison_PSAI <- homogeniai_duomenys %>%
dunn_test(PSAI ~ LNI01)
knitr::kable(PairwiseComparison_PSAI)
# Pairwise lyginimas tarp grupių Wilcox metodu
knitr::kable(homogeniai_duomenys %>%
wilcox_test(PSAI ~ LNI01))
# Vizualizuojame pariwise lyginimą
PairwiseComparison_PSAI <-
PairwiseComparison_PSAI %>% add_xy_position(x = "LNI01")
PW_PSAI <- ggboxplot(homogeniai_duomenys, x = "LNI01", y = "PSAI") +
stat_pvalue_manual(PairwiseComparison_PSAI, hide.ns = TRUE) +
labs(
subtitle = get_test_label(Kruskal_PSAI, detailed = TRUE),
caption = get_pwc_label(PairwiseComparison_PSAI)
)  +
theme(
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22),
plot.subtitle = element_text(size = 22),
plot.caption = element_text(size = 22)
)
ggsave(
paste0(Vizualizaciju_Aplankas, "\\PW_PSAI.png"),
plot = PW_PSAI,
width = 17,
height = 8,
units = c("in")
)
###############################################################################
###############################################################################
###############################################################################
###############################################################################
# Požymių priklausomumo lentelės
###############################################################################
# LNI01 ir GLpoRP_ISUP
knitr::kable(xtabs(~ LNI01 + GLpoRP_ISUP, data = homogeniai_duomenys))
homogeniai_duomenys <- homogeniai_duomenys %>%
mutate(GLpoRP_ISUP = factor(case_when(
as.character(GLpoRP_ISUP) == "1" ~ "2",
TRUE ~ as.character(GLpoRP_ISUP)
)))
Pozymiu_Lentele <-
xtabs(~ LNI01 + GLpoRP_ISUP, data = homogeniai_duomenys)
knitr::kable(Pozymiu_Lentele)
# Taikome chi kvadratą
chisq.test(Pozymiu_Lentele)
#LNI01 ir pT
Pozymiu_Lentele <- xtabs(~ LNI01 + pT, data = homogeniai_duomenys)
knitr::kable(Pozymiu_Lentele)
# Taikome chi kvadratą
chisq.test(Pozymiu_Lentele)
#LNI01 ir R1
Pozymiu_Lentele <- xtabs(~ LNI01 + R1, data = homogeniai_duomenys)
knitr::kable(Pozymiu_Lentele)
# Taikome chi kvadratą
chisq.test(Pozymiu_Lentele)
# Taikome Freeman-Halton fisher’s exact test'ą
fisher.test(Pozymiu_Lentele)
###############################################################################
###############################################################################
###############################################################################
apmokymo_imtis <- homogeniai_duomenys %>%
mutate(
CSS = as.numeric(CSS) - 1,
Death_other_causes = as.numeric(Death_other_causes) - 1,
LNI01 = factor(LNI01),
pT = factor(pT),
R1 = factor(R1),
GLpoRP_ISUP = factor(GLpoRP_ISUP),
Amzius = as.numeric(Amzius),
PSAI = as.numeric(PSAI),
)
# Testavimo imtį sudarys visi like stebiniai, kurie nepateko į homogeninę duomenų imtį
testavimo_imtis <- sutvarkyti_duomenys %>%
filter(!(numeris %in% apmokymo_imtis$numeris)) %>%
mutate(GLpoRP_ISUP = factor(case_when(
as.character(GLpoRP_ISUP) == "1" ~ "2",
TRUE ~ as.character(GLpoRP_ISUP)
))) %>%
mutate(
CSS = as.numeric(CSS) - 1,
Death_other_causes = as.numeric(Death_other_causes) - 1,
LNI01 = factor(LNI01),
pT = factor(pT),
R1 = factor(R1),
GLpoRP_ISUP = factor(GLpoRP_ISUP),
Amzius = as.numeric(Amzius),
PSAI = as.numeric(PSAI),
) %>%
dplyr::select(-numeris, -OS, -Death_other_causes)
# Funkcija, skaičiuojanti modelio spėjamą tikimybę kiekvienam stebiniui iš pateiktos duomenų imties
Tikimybes <- function(tikimybiu_matrica_f, testavimo_imtis_f) {
# Susidarome tuščia vektorių
tikimybes <-
vector(mode = "numeric", length = nrow(testavimo_imtis_f))
# Surikiuojame pateiktos testavimo imties stebėjimo laikus
stebejimo_laikai <- sort(unique(testavimo_imtis_f$Survival_years))
# Kiekvienam stebiniui surandame išgyvenimo tikimybę ties jo stebėjimo laiku
for (i in 1:length(tikimybes)) {
# Pasiemame i-tojo stebinio išgyvenimo tikimybes ties visomis stebėjimo laiko reikšmėmis
i_stebinio_tikimybes <- tikimybiu_matrica_f[i,]
# Randame i-tojo vektoriaus didžiausią poziciją, ties kuria sutampa visų turimų stebėjimų laikas su stebinio stebėjimo laiku
poz <-
max(which(stebejimo_laikai == testavimo_imtis_f$Survival_years[i]))
# Priskiriame tikimybę i-tajam stebiniui
tikimybes[i] <- i_stebinio_tikimybes[poz]
}
return(tikimybes)
}
# Skaičiuojame rizikos santykius visoms įmanomoms lygmenų kombinacijoms
visi_lygmenys <- function(apmokymo_imtis, modelis) {
list_variables <- NULL
for (i in 1:4) {
list_imtis <- apmokymo_imtis %>%
mutate(
pT = factor(pT, levels = list_pT_R1_LNI01[[i]]),
R1 = factor(R1, levels = list_pT_R1_LNI01[[i]]),
LNI01 = factor(LNI01, levels = list_pT_R1_LNI01[[i]]),
GLpoRP_ISUP = factor(GLpoRP_ISUP, levels = list_GLpoRPISUP[[i]])
)
if(modelis == "Cox"){
list_cox <-
coxph(
Surv(Survival_years, mirties_kintamasis) ~ Amzius + PSAI + pT + LNI01 + R1 + GLpoRP_ISUP,
data = list_imtis,
x = TRUE,
y = TRUE
)
list_summary <- summary(list_cox)
}else if(modelis == "FG"){
list_finegray <-
FGR(
Hist(Survival_years, mirties_kintamasis) ~ Amzius + PSAI + pT + LNI01 + R1 + GLpoRP_ISUP,
data = list_imtis,
cause = "1"
)
list_summary <- summary(list_finegray$crrFit)
}else return(null)
list_variables <- as.data.frame(list_summary$coef[, c(1, 5)]) %>%
tibble::rownames_to_column(var = "kintamasis") %>%
mutate(kintamasis = case_when(
grepl("GLpoRP", kintamasis) ~ paste0(kintamasis, "_vs_", list_GLpoRPISUP[[i]][1]),!(kintamasis %in% c("Amzius", "PSAI")) ~ paste0(kintamasis, "_vs_", list_pT_R1_LNI01[[i]][1]),
TRUE ~ kintamasis
)) %>%
bind_cols(as.data.frame(list_summary$conf.int)) %>%
bind_rows(list_variables) %>%
mutate_if(is.numeric, round, 3)
}
return(list_variables)
}
# Biblioteka, reikalinga cox rizikos modelio sudarymui
library(survival)
# Biblioteka, reikalinga concordance indexui suskaičiuoti
library(survcomp)
# Biblioteka, reikalinga tiksliausio COX modelio atrinkimui
library(pec)
# Biblioteka, reikalinga sumaišymo matricai sugeneruoti
library(caret)
# Biblioteka, reikalinga sumaišymo matricai sugeneruoti
library(caret)
# Biblioteka, reikalinga rizikos tikimybių matricai sudaryti
library(riskRegression)
# Sudarome COX modelį su atrinktais homogeniniais duomenimis
cox <-
coxph(
Surv(Survival_years, CSS) ~ Amzius + PSAI + pT + LNI01 + R1 + GLpoRP_ISUP,
data = apmokymo_imtis,
x = TRUE,
y = TRUE
)
summary(cox)
# 95% pasikliautinieji intervalai
confint(cox, level = 0.95)
exp(confint(cox, level = 0.95))
# 99% pasikliautinieji intervalai
confint(cox, level = 0.99)
exp(confint(cox, level = 0.99))
# Tikriname proporcingumo hipotezes
cox.zph(cox)
# Sudarome grafinį cox modelio kintamųjų rizikos santykių atvaizdavimą
cox_forest <- ggforest(cox,
main = "",
fontsize = 1.5,
refLabel = "palyginamsis")
ggsave(
paste0(Vizualizaciju_Aplankas, "\\Amzius_cox_forest.png"),
plot = cox_forest,
width = 14,
height = 8
)
# Skaičiuojame tikimybių matricą apmokymo imčiai naudodamiesi cox modeliu
cox_tikimybiu_matrica_apmokymo <-
predictRisk(cox, newdata = apmokymo_imtis, times = sort(unique(apmokymo_imtis$Survival_years)))
# Skačiuojam kiekvieno apmokymo imties stebinio tikimybę mirti nuo prostatos vėžio
cox_tikimybes_apmokymo <-
Tikimybes(cox_tikimybiu_matrica_apmokymo, apmokymo_imtis)
# Skaičiuojame tikimybių matricą testavimo imčiai naudodamiesi cox modeliu
cox_tikimybiu_matrica_testavimo <-
predictRisk(cox, newdata = testavimo_imtis, times = sort(unique(testavimo_imtis$Survival_years)))
# Skačiuojam kiekvieno testavimo imties stebinio tikimybę mirti nuo prostatos vėžio
cox_tikimybes_testavimo <-
Tikimybes(cox_tikimybiu_matrica_testavimo, testavimo_imtis)
# Apskaičiuosim skirtingų faktorių lygmenų rizikos santykius
list_pT_R1_LNI01 <- list(c("0", "1", "2"),
c("1", "0", "2"),
c("2", "0", "1"),
c("0", "1", "2"))
list_GLpoRPISUP <- list(c("2", "3", "4", "5"),
c("3", "2", "4", "5"),
c("4", "2", "3", "5"),
c("5", "2", "3", "4"))
# Skaičiuojam visų faktorių lygmenų rizikos santykius pagal mirtis nuo prostatos vėžio
list_variables_css <- visi_lygmenys(apmokymo_imtis %>% mutate(mirties_kintamasis = CSS), modelis = "Cox")
knitr::kable(list_variables_css)
# Skaičiuojam visų faktorių lygmenų rizikos santykius pagal mirtis nuo kitų priežasčių
list_variables_doc <- visi_lygmenys(apmokymo_imtis %>% mutate(mirties_kintamasis = Death_other_causes), modelis = "Cox")
knitr::kable(list_variables_doc)
# Skaičiuojam visų faktorių lygmenų rizikos santykius pagal mirtis nuo kitų priežasčių
list_variables_doc <- visi_lygmenys(apmokymo_imtis %>% mutate(mirties_kintamasis = Death_other_causes), modelis = "Cox")
knitr::kable(list_variables_doc)
# Biblioteka, reikalinga Fine & Gray modelio sudarymui
library(cmprsk)
# Sudarome Fine & Gray modelį su atrinktais homogeniniais duomenimis
finegray <-
FGR(
Hist(Survival_years, CSS) ~ Amzius + PSAI + pT + LNI01 + R1 + GLpoRP_ISUP,
data = apmokymo_imtis,
cause = "1"
)
summary(finegray$crrFit)
# Skaičiuojame tikimybių matricą testavimo imčiai naudodamiesi Fine & Gray modeliu
finegray_tikimybiu_matrica_apmokymo <-
predictRisk(finegray, newdata = apmokymo_imtis, times = sort(unique(apmokymo_imtis$Survival_years)))
# Skačiuojam kiekvieno testavimo imties stebinio tikimybę mirti nuo prostatos vėžio
finegray_tikimybes_apmokymo <-
Tikimybes(finegray_tikimybiu_matrica_apmokymo, apmokymo_imtis)
# Skaičiuojame tikimybių matricą testavimo imčiai naudodamiesi Fine & Gray modeliu
finegray_tikimybiu_matrica_testavimo <-
predictRisk(finegray, newdata = testavimo_imtis, times = sort(unique(testavimo_imtis$Survival_years)))
# Skačiuojam kiekvieno testavimo imties stebinio tikimybę mirti nuo prostatos vėžio
finegray_tikimybes_testavimo <-
Tikimybes(finegray_tikimybiu_matrica_testavimo, testavimo_imtis)
# Skaičiuojam visų faktorių lygmenų rizikos santykius pagal mirtis nuo prostatos vėžio
list_variables_css <- visi_lygmenys(apmokymo_imtis %>% mutate(mirties_kintamasis = CSS), modelis = "FG")
knitr::kable(list_variables_css)
# Skaičiuojam visų faktorių lygmenų rizikos santykius pagal mirtis nuo kitų priežasčių
list_variables_doc <- visi_lygmenys(apmokymo_imtis %>% mutate(mirties_kintamasis = Death_other_causes), modelis = "FG")
knitr::kable(list_variables_doc)
# Biblioteka, reikalinga ROC kreivių sudarymui
library(pROC)
# Generuojame ROC kreivę cox modeliui ant apmokymo imties
cox_roc_apmokymo <- roc(apmokymo_imtis$CSS, cox_tikimybes_apmokymo)
cox_roc_apmokymo
# Generuojame ROC kreivę fine & gray modeliui ant apmokymo imties
finegray_roc_apmokymo <-
roc(apmokymo_imtis$CSS, finegray_tikimybes_apmokymo)
finegray_roc_apmokymo
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives apmokymo imčiai
roc_cox_vs_finegray_apmokymo <- ggroc(list(Cox = cox_roc_apmokymo,
Fine_Gray = finegray_roc_apmokymo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22),
legend.text = element_text(size = 22),
legend.title = element_text(size = 22)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
roc_cox_vs_finegray_apmokymo
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives testavimo imčiai
roc_cox_vs_finegray_testavimo <- ggroc(list(Cox = cox_roc_testavimo,
Fine_Gray = finegray_roc_testavimo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size = 28),
legend.text = element_text(size = 28),
legend.title = element_text(size = 28)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives apmokymo imčiai
roc_cox_vs_finegray_apmokymo <- ggroc(list(Cox = cox_roc_apmokymo,
Fine_Gray = finegray_roc_apmokymo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size = 28),
legend.text = element_text(size = 28),
legend.title = element_text(size = 28)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
# Generuojame ROC kreivę cox modeliui ant testavimo imties
cox_roc_testavimo <-
roc(testavimo_imtis$CSS, cox_tikimybes_testavimo)
cox_roc_testavimo
# Generuojame ROC kreivę fine & gray modeliui ant testavimo imties
finegray_roc_testavimo <-
roc(testavimo_imtis$CSS, finegray_tikimybes_testavimo)
finegray_roc_testavimo
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives testavimo imčiai
roc_cox_vs_finegray_testavimo <- ggroc(list(Cox = cox_roc_testavimo,
Fine_Gray = finegray_roc_testavimo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 28),
axis.text.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size = 28),
legend.text = element_text(size = 28),
legend.title = element_text(size = 28)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
ROC_arranged <-
ggarrange(
roc_cox_vs_finegray_apmokymo,
roc_cox_vs_finegray_testavimo,
#heights = c(2, 0.7),
#legend = "none",
ncol = 2,
nrow = 1,
align = "v"
)
ggsave(
paste0(Vizualizaciju_Aplankas, "\\ROC_arranged.png"),
plot = ROC_arranged,
width = 20,
height = 14,
units = c("in")
)
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives apmokymo imčiai
roc_cox_vs_finegray_apmokymo <- ggroc(list(Cox = cox_roc_apmokymo,
Fine_Gray = finegray_roc_apmokymo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 32),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 32),
axis.title.y = element_text(size = 32),
legend.text = element_text(size = 32),
legend.title = element_text(size = 32)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
# Atvaizduojame Cox ir Fine & Gray modelių ROC kreives testavimo imčiai
roc_cox_vs_finegray_testavimo <- ggroc(list(Cox = cox_roc_testavimo,
Fine_Gray = finegray_roc_testavimo),
legacy.axes = T) +
geom_abline() +
theme_minimal() +
theme(
axis.text.x = element_text(size = 32),
axis.text.y = element_text(size = 32),
axis.title.x = element_text(size = 32),
axis.title.y = element_text(size = 32),
legend.text = element_text(size = 32),
legend.title = element_text(size = 32)
) +
scale_color_brewer(palette = "Dark2") +
geom_line(size = 2) +
labs(color = "Model")
ROC_arranged <-
ggarrange(
roc_cox_vs_finegray_apmokymo,
roc_cox_vs_finegray_testavimo,
#heights = c(2, 0.7),
#legend = "none",
ncol = 2,
nrow = 1,
align = "v"
)
ggsave(
paste0(Vizualizaciju_Aplankas, "\\ROC_arranged.png"),
plot = ROC_arranged,
width = 20,
height = 14,
units = c("in")
)
knitr::opts_chunk$set(echo = TRUE)
# Biblioteka sas duomenų failo nuskaitymui
library(haven)
# Biblioteka duomenų tvarkymui
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
# Biblioteka sas duomenų failo nuskaitymui
library(haven)
# Biblioteka duomenų tvarkymui
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
# Biblioteka sas duomenų failo nuskaitymui
library(haven)
# Biblioteka duomenų tvarkymui
library(dplyr)
install.packages("purrr")
# Biblioteka duomenų tvarkymui
library(dplyr)
remove.packages("purrr", lib="~/R/win-library/4.1")
remove.packages("dplyr", lib="~/R/win-library/4.1")
install.packages("installr")
installr::updateR()
knitr::opts_chunk$set(echo = TRUE)
# Biblioteka sas duomenų failo nuskaitymui
library(haven)
# Biblioteka duomenų tvarkymui
library(dplyr)
install.packages("dplyr")
Sys.getlocale()
cd \
1 + x
knitr::opts_chunk$set(echo = TRUE)
# Biblioteka sas duomenų failo nuskaitymui
library(haven)
# Biblioteka duomenų tvarkymui
library(dplyr)
install.packages("purrr")
install.packages("purrr")
.libpaths()
.libpaths
.libPaths()
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
